	Sensor


Producing the sensor in the minimum cost is quite important due to its common usability such that tremendously many sensors are used to be deployed in a larger region. 

For this, you want to design the sensor architecture with a very limited memory where a few operations are allowed only as follows:

1.      The memory consists of only two 32-bit integer variables a and b.

2.      Only three operations for a and b in the next table are allowed.



  operation name	  operation
        X	          a = a + b
        Y	          a = a - b
        Z                 b = a - b


You are given three integer values; the first value is initially stored at the variable a, the second value is initially stored at the variable b, and the third value is a goal value K. 

Then you should decide whether or not you can store the goal value K at the variable a by applying any number of the allowed operations in some order. 

If it is possible, then you also need to print the operations in the order that you have applied. An example and output format will be explained in the output description.

 

Time limit: 1 seconds for 40 test cases. (java 2 seconds)

(If your program exceeds this time limit, the answers that have been already printed are ignored and the score becomes 0. 

So, it may be better to print a wrong answer when a specific test case might cause your program to exceed the time limit. One guide for the time limit excess would be the size of the input.)

 

[Input]
There can be more than one test case in the input file. The first line contains C, the number of test cases. Then the totally C test cases are provided in the following lines.
Each test case consists of only one line containing three integers; the first one is the value stored in the variable a, the second one is the value stored in the variable b, and the third one is the goal value K. All three integer values a, b, and K are between -109 and 109.

The three groups of the total 40 test cases are prepared as follows:

Group 1: This contains 20 test cases from #1 to #20 in which -300≤ a,b,K ≤ 300. For each test case, you will get 1.5 credits.

Group 2: This contains 10 test cases from #21 to #30 in which -104≤ a,b,K ≤ 104. For each test case, you will get 3 credits.

Group 3: This contains 10 test cases from #31 to #40 in which -109≤ a,b,K ≤ 109. For each test case, you will get 4 credits.

 

 

[Output]
The output for each test case should contain two or more lines. For the T-th test case, "Case #T" should be printed out in the first line. 

From the second line, you should print the result for a test case as follows. If you can store the goal value K at the variable a by some sequence of the operations, then you print YES; otherwise print NO. 

If you print YES, you should print the sequence of the operations, from the next line, in the order you have applied according to the following format. 

Each line consists of a pair of two values; an operation name and the number of the consecutive applications of the operation. 

 

For example, you are given a = 19, b = 7, K = 27, then you can store 27 at the variable a by the sequence of the operations shown in the next table. 

You then print Y 1 in the first line, Z 1 in the second line, and X 3 in the third line. 

This means that you first applied the operation Y just once, then applied the operation Z once, and finally applied the operation X three times consecutively. 

(Notice that instead of printing X 3, you are not allowed to print X 1 and X 2 in the two lines or print X 1, X 1, and X 1 in the three lines.)

    Operations		Value at a	Value at b
  Initial values →	    19		    7
        Y		    12		    7
        Z		    12		    5
        X		    17		    5
        X		    22		    5
        X		    27		    5


[Notice 1] 

If your program generates “overflow” errors during the run for a test case, then you will get zero credit for that test case. 

 

[Notice 2] 

The number of lines of pairs of operation name and its application number should be between 0 and 1000, and the application number should not exceed 2.1 × 109. 

For example, if the goal value is given as the initial value of a, then you want to print out 0 lines.

For every test case given as an input, if its result is YES, then there always exists a valid sequence of the operations which satisfies the above two notices.



[I/O Example]
Input
2                          ← # of test cases
19 7 27              ← the first test case
0 2 1                   ← the second test case

 

Output
Case #1
YES
Y 1
Z 1
X 3
Case #2
NO


